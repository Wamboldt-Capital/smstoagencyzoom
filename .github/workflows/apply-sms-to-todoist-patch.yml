name: Apply sms_to_todoist.py patch

on:
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  apply-patch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Write patch file
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const patch = `
diff --git a/sms_to_todoist.py b/sms_to_todoist.py
new file mode 100644
index 0000000000000000000000000000000000000000..1a5181328e2ccd773bf433c3a905d3f63f9551c1
--- /dev/null
+++ b/sms_to_todoist.py
@@ -0,0 +1,336 @@
+"""Pull recent SMS threads from AgencyZoom and create Todoist tasks."""
+from __future__ import annotations
+
+import json
+import os
+import time
+from datetime import datetime, timezone
+from typing import Any, Iterable, Optional
+
+import requests
+from requests import RequestException
+from requests import Response
+from requests.exceptions import HTTPError
+
+AZ_BASE = os.getenv("AZ_BASE", "https://api.agencyzoom.com").rstrip("/")
+AZ_API_BASE = f"{AZ_BASE}/v1"
+CACHE_FILE = ".sms_to_todoist_cache.json"
+REQUEST_TIMEOUT = int(os.getenv("REQUEST_TIMEOUT_SECONDS", "30"))
+DEFAULT_ENV_FILE = ".env"
+
+
+def _bool_env(name: str, default: bool = False) -> bool:
+    value = os.getenv(name)
+    if value is None:
+        return default
+    return value.strip().lower() in {"1", "true", "yes", "y"}
+
+
+DEBUG_MODE = _bool_env("DEBUG", False)
+
+
+# -------- helpers ---------
+
+
+def load_env_file(path: str = DEFAULT_ENV_FILE) -> None:
+    """Populate environment variables from a local ``.env`` style file."""
+
+    if not path:
+        return
+
+    try:
+        with open(path, "r", encoding="utf-8") as handle:
+            for raw_line in handle:
+                line = raw_line.strip()
+                if not line or line.startswith("#"):
+                    continue
+
+                if "=" not in line:
+                    continue
+
+                key, value = line.split("=", 1)
+                key = key.strip()
+                if not key:
+                    continue
+
+                value = value.strip().strip('"').strip("'")
+                os.environ.setdefault(key, value)
+    except FileNotFoundError:
+        return
+    except Exception as exc:  # pragma: no cover - defensive logging only
+        print(f"[warn] failed to parse env file {path}: {exc}")
+
+
+def debug(message: str) -> None:
+    if DEBUG_MODE:
+        print(f"[debug] {message}")
+
+
+def _int_env(name: str, default: int) -> int:
+    raw = os.getenv(name)
+    if raw is None or not raw.strip():
+        return default
+    try:
+        return int(raw)
+    except ValueError:
+        return default
+
+
+def load_cache() -> set[str]:
+    try:
+        with open(CACHE_FILE, "r", encoding="utf-8") as fh:
+            payload = json.load(fh)
+    except FileNotFoundError:
+        return set()
+    except Exception:
+        return set()
+    seen: Iterable[str] = payload.get("seen_message_ids", []) if isinstance(payload, dict) else []
+    return {str(item) for item in seen}
+
+
+def save_cache(ids: Iterable[str]) -> None:
+    try:
+        with open(CACHE_FILE, "w", encoding="utf-8") as fh:
+            json.dump({"seen_message_ids": sorted({str(i) for i in ids})}, fh, indent=2)
+    except Exception as exc:  # pragma: no cover - best effort logging
+        print(f"[warn] failed to write cache: {exc}")
+
+
+def parse_iso(value: str) -> Optional[datetime]:
+    if not value:
+        return None
+    try:
+        # AgencyZoom returns strings like "2023-10-08T16:14:23.123Z"
+        if value.endswith("Z"):
+            return datetime.fromisoformat(value.replace("Z", "+00:00"))
+        parsed = datetime.fromisoformat(value)
+        return parsed i
